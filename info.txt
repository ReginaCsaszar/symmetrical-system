
BUILD C++ PROJECTS INTO WASM

- for windows
- you'll need python3, emscripten, cmake, ninja
- pull an opencv repo in here 


-- emscripten setup: go to your emsdk folder, then

emsdk.bat activate latest
emsdk_env.bat

- use build_opencv_wasm.ps1 or

-- use opencv/CMakeLists.txt to set build flags
-- sample build here: https://blog.seeso.io/face-detection-on-web-tflite-wasm-simd-462975e0f628

emcmake cmake .. -DCMAKE_CXX_FLAGS="-pthread" -DBUILD_IPP_IW=OFF -DBUILD_ITT=OFF -DBUILD_JPEG=OFF -DBUILD_PACKAGE=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_PROTOBUF=OFF -DBUILD_SHARED_LIBS=OFF -DBUILD_TESTS=OFF -DBUILD_ZLIB=ON -DBUILD_opencv_apps=OFF -DBUILD_opencv_calib3d=ON -DBUILD_opencv_core=ON -DBUILD_opencv_dnn=ON -DBUILD_opencv_features2d=ON -DBUILD_opencv_flann=ON -DBUILD_opencv_gapi=OFF -DBUILD_opencv_highgui=OFF -DBUILD_opencv_imgcodecs=ON -DBUILD_opencv_imgproc=ON -DBUILD_opencv_java_bindings_generator=OFF -DBUILD_opencv_js=OFF -DBUILD_opencv_js_bindings_generator=OFF -DBUILD_opencv_ml=OFF -DBUILD_opencv_objc_bindings_generator=OFF -DBUILD_opencv_objdetect=OFF -DBUILD_opencv_photo=OFF -DBUILD_opencv_python_bindings_generator=OFF -DBUILD_opencv_python_tests=OFF -DBUILD_opencv_stitching=OFF -DBUILD_opencv_ts=OFF -DBUILD_opencv_video=OFF -DBUILD_opencv_videoio=OFF -DBUILD_opencv_world=ON -DCV_ENABLE_INTRINSICS=OFF -DOPENCV_DNN_OPENCL=OFF -DWITH_1394=OFF -DWITH_ADE=OFF -DWITH_FFMPEG=OFF -DWITH_GSTREAMER=OFF -DWITH_GTK=OFF -DWITH_IMGCODEC_HDR=OFF -DWITH_IMGCODEC_PFM=OFF -DWITH_IMGCODEC_PXM=OFF -DWITH_IMGCODEC_SUNRASTER=OFF -DWITH_IPP=OFF -DWITH_ITT=OFF -DWITH_JASPER=OFF -DWITH_LAPACK=OFF -DWITH_OPENCL=OFF -DWITH_OPENCLAMDBLAS=OFF -DWITH_OPENCLAMDFFT=OFF -DWITH_PNG=ON -DWITH_PROTOBUF=OFF -DWITH_PTHREADS_PF=ON -DWITH_QUIRC=OFF -DWITH_TIFF=OFF -DWITH_V4L=OFF -DWITH_VA=OFF -DWITH_VA_INTEL=OFF -DWITH_WEBP=OFF

-- dont forget to build & release

ninja 
ninja install

- put files to their place with copy_target_files.ps1
- copy your cpp file to the include folder


- build from terminal

em++ -I target/include -L include/image2.cpp target/lib/libopencv_world.a -o include/image2.js -O3 -s NO_EXIT_RUNTIME=1 -s "EXPORTED_RUNTIME_METHODS=['ccall']" -s ASSERTIONS=1 -- bind -v

- build w cmake

emcmake cmake -DCMAKE_CXX_FLAGS="-pthread -s INITIAL_MEMORY=134217728" -DTFLITE_WITH_WASM_SIMD=[ON] -DCMAKE_BUILD_TYPE=[Release]